@using Microsoft.AspNetCore.SignalR.Client
@using RiskPublic.Components.Pages.HelpComponents


<div class="stats">
    <div class="inside">
        @if (GameStarted == true)
        {
            for (int i = 0; i < Players.Count; i++)
            {
                <div class="banner @Highlight(Players[i])" style="border-color:@Players[i].Color" id="@($"pos-{i + 1}")">
                    <div class="icon-stats">
                        <IconComponent Color="@Players[i].Color"></IconComponent>
                    </div>
                    <div>@Players[i].Name</div>
                    <div class="sol-map-stats">
                        <div class="inv-stats sol-stats">
                            <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-person" viewBox="0 0 16 16">
                                <path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6m2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0m4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4m-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10s-3.516.68-4.168 1.332c-.678.678-.83 1.418-.832 1.664z" />
                            </svg>
                            <div>@Players[i].Soldiers</div>
                        </div>
                        <div class="inv-stats">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-pin-map" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M3.1 11.2a.5.5 0 0 1 .4-.2H6a.5.5 0 0 1 0 1H3.75L1.5 15h13l-2.25-3H10a.5.5 0 0 1 0-1h2.5a.5.5 0 0 1 .4.2l3 4a.5.5 0 0 1-.4.8H.5a.5.5 0 0 1-.4-.8z" />
                                <path fill-rule="evenodd" d="M8 1a3 3 0 1 0 0 6 3 3 0 0 0 0-6M4 4a4 4 0 1 1 4.5 3.969V13.5a.5.5 0 0 1-1 0V7.97A4 4 0 0 1 4 3.999z" />
                            </svg>
                            <div>@Players[i].Land</div>
                        </div>
                    </div>


                </div>
            }
        }
        else if (GetPlayer()?.Host == true)
        {
            for (int i = 0; i < Players.Count; i++)
            {
                PlayerModel p = Players[i];
                <div class="banner" id="@($"pos-{i + 1}")">
                    <div class="icon-stats">
                        <IconComponent Color="@Players[i].Color"></IconComponent>
                    </div>
                    <div>@Players[i].Name</div>
                    @if (p.Host == false)
                    {
                        <div @onclick="() => KickPlayer(p)">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-circle" viewBox="0 0 16 16">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                                <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708" />
                            </svg>
                        </div>
                    }
                    else
                    {
                        <div></div>
                    }
                </div>
            }
        }
        else
        {
            for (int i = 0; i < Players.Count; i++)
            {
                PlayerModel p = Players[i];
                <div class="banner" id="@($"pos-{i + 1}")">
                    <div class="icon-stats">
                        <IconComponent Color="@Players[i].Color"></IconComponent>
                    </div>
                    <div>@Players[i].Name</div>
                    <div></div>
                </div>
            }
        }


        @if (GameStarted == false && Players.Count < 6 && Players.Where(x => x.Bot == false).Count() == 1)
        {
            <AddBotComponent Colors="@Colors" Players="@Players" HubConnection="@HubConnection" Url="@URL"></AddBotComponent>
        }
    </div>

</div>



@code {

    [Parameter]
    public List<ColorsModel> Colors { get; set; } = new();

    [Parameter]
    public List<PlayerModel> Players { get; set; }

    [Parameter]
    public PlayerModel Playing { get; set; }

    [Parameter]
    public HubConnection HubConnection { get; set; }

    [Parameter]
    public string URL { get; set; }

    [Parameter]
    public string PersonId { get; set; }

    [Parameter]
    public bool GameStarted { get; set; }

    private string Highlight(PlayerModel player)
    {
        if (Playing is not null && player.ConnectionId == Playing.ConnectionId)
        {
            return "playing";
        }
        return "";
    }

    private async Task KickPlayer(PlayerModel player)
    {
        await HubConnection.SendAsync("Kick", URL, player);
    }

    private PlayerModel? GetPlayer() => Players.FirstOrDefault(x => x.ConnectionId == PersonId);
}
