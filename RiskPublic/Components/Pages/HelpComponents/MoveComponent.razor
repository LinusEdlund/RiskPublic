@inject IJSRuntime JsRuntime;

<div class="add-soldiers">
    <button @onclick="Cancel" class="btn-round cancel">
        <svg xmlns="http://www.w3.org/2000/svg" fill="white" class="bi bi-x input-svg" viewBox="0 0 16 16">
            <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708" stroke="white" stroke-width="2" />
        </svg>
    </button>
    @if (MaxSoldiers < 3)
    {
        for (int i = 1; i <= MaxSoldiers; i++)
        {
            int currentIndex = i;
            <div class="number @Middle(currentIndex)" @onclick="@(() => MoveSolders(currentIndex))">@currentIndex</div>
        }
    }
    else
    {
        for (int i = selcted - 1; i <= selcted + 1; i++)
        {
            int currentIndex = (i <= 0) ? MaxSoldiers + i : (i > MaxSoldiers) ? i - MaxSoldiers : i;
            <div class="number @Middle(currentIndex)" @onclick="@(() => MoveSolders(currentIndex))">@currentIndex</div>
        }
    }
    <button class="btn-round confirm" @onclick="ComfirmMove">
        <svg xmlns="http://www.w3.org/2000/svg" fill="white" class="bi bi-check input-svg" viewBox="0 0 16 16">
            <path d="M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425z" stroke="white" stroke-width="2" />
        </svg>
    </button>
</div>

@code {
    [Parameter]
    public int MaxSoldiers { get; set; }

    [Parameter]
    public EventCallback<int> Move { get; set; }

    [Parameter]
    public EventCallback False { get; set; }

    [Parameter]
    public PlayerModel Player { get; set; }

    private int amountToMove = 0;
    private int selcted = 0;
    private bool clicked = false;

    private async Task ComfirmMove()
    {
        if (clicked)
        {
            return;
        }
        clicked = true;
        if (amountToMove == 0)
        {
            amountToMove = MaxSoldiers;
        }
        foreach (var country in Player.OwnedCountries.Keys)
        {
            await JsRuntime.InvokeVoidAsync("clickedLandRemove", country);
        }
        

        await Move.InvokeAsync(amountToMove);
    }

    private async Task Cancel()
    {
        foreach (var country in Player.OwnedCountries.Keys)
        {
            await JsRuntime.InvokeVoidAsync("clickedLandRemove", country);
        }
        await False.InvokeAsync();
    }

    private void MoveSolders(int amount)
    {
        selcted = amount;
        amountToMove = amount;
    }


    private string Middle(int index)
    {
        if (amountToMove == 0)
        {
            amountToMove = MaxSoldiers;
        }

        if (index == amountToMove)
        {
            return "middle";
        }
        return "";
    }
}
